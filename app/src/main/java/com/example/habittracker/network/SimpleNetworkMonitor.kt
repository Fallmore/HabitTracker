package com.yourname.habittracker.network

import android.content.Context
import android.net.ConnectivityManager
import android.net.Network
import android.net.NetworkCapabilities
import android.net.NetworkRequest
import android.os.Build
import android.widget.Toast

class SimpleNetworkMonitor(private val context: Context) {

    private val connectivityManager =
        context.getSystemService(Context.CONNECTIVITY_SERVICE) as ConnectivityManager

    private val networkCallback = object : ConnectivityManager.NetworkCallback() {
        override fun onAvailable(network: Network) {
            super.onAvailable(network)
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º Toast –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Å–µ—Ç–∏
            showToast("üì∂ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω")
        }

        override fun onLost(network: Network) {
            super.onLost(network)
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º Toast –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –æ—Ç —Å–µ—Ç–∏
            showToast("‚ùå –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω")
        }
    }

    fun startMonitoring() {
        val networkRequest = NetworkRequest.Builder()
            .addCapability(NetworkCapabilities.NET_CAPABILITY_INTERNET)
            .build()

        connectivityManager.registerNetworkCallback(networkRequest, networkCallback)

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        showCurrentNetworkStatus()
    }

    fun stopMonitoring() {
        connectivityManager.unregisterNetworkCallback(networkCallback)
    }

    private fun showCurrentNetworkStatus() {
        val isConnected = isNetworkAvailable()
        val message = if (isConnected) {
            "üì∂ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω (–ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ)"
        } else {
            "‚ùå –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω (–ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ)"
        }
        showToast(message)
    }

    private fun isNetworkAvailable(): Boolean {
        val network = connectivityManager.activeNetwork
        val capabilities = connectivityManager.getNetworkCapabilities(network)
        return capabilities != null && (
                capabilities.hasTransport(NetworkCapabilities.TRANSPORT_WIFI) ||
                        capabilities.hasTransport(NetworkCapabilities.TRANSPORT_CELLULAR) ||
                        capabilities.hasTransport(NetworkCapabilities.TRANSPORT_ETHERNET)
                )
    }

    private fun showToast(message: String) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–∞–≤–Ω—ã–π –ø–æ—Ç–æ–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞ Toast
        android.os.Handler(context.mainLooper).post {
            Toast.makeText(context, message, Toast.LENGTH_LONG).show()
        }
    }
}